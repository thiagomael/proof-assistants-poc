(rational_expressions
 (vars_TCC1 0
  (vars_TCC1-1 nil 3701099612 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC2 0
  (vars_TCC2-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC3 0
  (vars_TCC3-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC4 0
  (vars_TCC4-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC5 0
  (vars_TCC5-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC6 0
  (vars_TCC6-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC7 0
  (vars_TCC7-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC8 0
  (vars_TCC8-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (vars_TCC9 0
  (vars_TCC9-1 nil 3701099612 ("" (tcc))
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (eval_TCC1 0
  (eval_TCC1-1 nil 3701099612 ("" (tcc) (("" (postpone) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[rat_expr])"
     rational_expressions nil))
   nil))
 (zero_sum_identity 0
  (zero_sum_identity-1 nil 3701265828
   ("" (expand "identity?")
    (("" (skosimp*)
      (("" (split)
        (("1" (lemma "eval_equality" ("x" "x!1 + zero" "y" "x!1"))
          (("1" (grind)
            (("1" (inst - "LAMBDA (x:variable): 0") nil nil)) nil))
          nil)
         ("2" (lemma "eval_equality" ("x" "zero + x!1" "y" "x!1"))
          (("2" (grind)
            (("2" (inst - "LAMBDA (x:variable): 0") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((identity? const-decl "bool" operator_defs nil)
    (eval def-decl "real" rational_expressions nil)
    (evaluation type-eq-decl nil rational_expressions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (variable formal-nonempty-type-decl nil rational_expressions nil)
    (eval_equality formula-decl nil rational_expressions nil)
    (rat_expr type-decl nil rational_expressions nil)
    (+ const-decl "rat_expr" rational_expressions nil)
    (zero const-decl "rat_expr" rational_expressions nil))
   shostak))
 (sum_associative 0
  (sum_associative-1 nil 3701269843
   ("" (expand "associative?")
    (("" (skeep)
      ((""
        (lemma "eval_equality"
         ("x" "(x!1 + y) + z" "y" "x!1 + (y + z)"))
        (("" (grind) (("" (inst - "LAMBDA (x:variable): 0") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((eval def-decl "real" rational_expressions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (evaluation type-eq-decl nil rational_expressions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (variable formal-nonempty-type-decl nil rational_expressions nil)
    (eval_equality formula-decl nil rational_expressions nil)
    (rat_expr type-decl nil rational_expressions nil)
    (+ const-decl "rat_expr" rational_expressions nil)
    (associative? const-decl "bool" operator_defs nil))
   shostak))
 (sum_commutative 0
  (sum_commutative-1 nil 3701269984
   ("" (expand "commutative?")
    (("" (skeep)
      (("" (lemma "eval_equality" ("x" "x!1 + y" "y" "y + x!1"))
        (("" (grind) (("" (inst - "LAMBDA (x:variable): 0") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((eval def-decl "real" rational_expressions nil)
    (evaluation type-eq-decl nil rational_expressions nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (variable formal-nonempty-type-decl nil rational_expressions nil)
    (eval_equality formula-decl nil rational_expressions nil)
    (rat_expr type-decl nil rational_expressions nil)
    (+ const-decl "rat_expr" rational_expressions nil)
    (commutative? const-decl "bool" operator_defs nil))
   shostak)))

