rational_expressions  [ variable: TYPE+ ]
		: THEORY

  BEGIN

  rat_expr: DATATYPE
    BEGIN
	const(r: real): const?
	variable(x: variable): variable?
	minus(a: rat_expr): minus?
	sum(a,b: rat_expr): sum?
	sub(a,b: rat_expr): sub?
	mul(a,b: rat_expr): mul?
	div(a,b: rat_expr): div?
    END rat_expr

  zero: rat_expr = const(0)
  
  a, b: VAR rat_expr

  ; -(a): rat_expr = minus(a)
  ; +(a,b): rat_expr = sum(a, b)
  ; -(a,b): rat_expr = sub(a, b)
  ; *(a,b): rat_expr = mul(a, b)
  ; /(a,b): rat_expr = div(a, b)

  vars(e: rat_expr): RECURSIVE finite_set[variable] =
    CASES e of
        const(r)    : emptyset,
	variable(x) : singleton(x),
	minus(a)    : vars(a),
	sum(a, b)   : union(vars(a), vars(b)),
	sub(a, b)   : union(vars(a), vars(b)),
	mul(a, b)   : union(vars(a), vars(b)),
	div(a, b)   : union(vars(a), vars(b))
    ENDCASES
    MEASURE e BY <<

  evaluation: TYPE = [variable -> real]

  % Introducing "not a number" to overcome possible division by zero.
  maybe_real: DATATYPE
    BEGIN
      real(num: real): is_real?
      undefined: undefined?
    END maybe_real

  eval (e: rat_expr, u: evaluation): RECURSIVE maybe_real =
    CASES e of
        const(r)    : real(r),
	variable(x) : real(u(x)),
	minus(a)    : LET a_ = eval(a, u) IN
		        IF is_real?(a_) THEN real(-num(a_))
		      	ELSE undefined ENDIF,
	sum(a, b)   : LET a_ = eval(a, u), b_ = eval(b, u) IN
	       	        IF (is_real?(a_) AND is_real?(b_)) THEN real(num(a_) + num(b_))
			ELSE undefined ENDIF,
	sub(a, b)   : LET a_ = eval(a, u), b_ = eval(b, u) IN
	       	        IF (is_real?(a_) AND is_real?(b_)) THEN real(num(a_) - num(b_))
			ELSE undefined ENDIF,
	mul(a, b)   : LET a_ = eval(a, u), b_= eval(b, u) IN
	       	        IF (is_real?(a_) AND is_real?(b_)) THEN real(num(a_) * num(b_))
			ELSE undefined ENDIF,
	div(a, b)   : LET a_ = eval(a, u), b_ = eval(b, u) IN
	       	        IF is_real?(a_) AND is_real?(b_) AND num(b_) /= 0 THEN real(num(a_) / num(b_))
			ELSE undefined ENDIF
    ENDCASES
    MEASURE e BY <<

  real_evaluation?(e: rat_expr)(u: evaluation): boolean = is_real?(eval(e, u))


  eval_equality: AXIOM
    FORALL (x,y: rat_expr):
        (FORALL (u: evaluation): eval(x, u) = eval(y, u))
      IMPLIES
        (x = y)


  END rational_expressions
